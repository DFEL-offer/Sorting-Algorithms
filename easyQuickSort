/*
一. 快速排序的核心思想
    1. 选择一个基准元素（通常是数组的第一个元素）。
    2. 通过一趟排序将数组分为两部分，其中一部分所有元素都小于基准元素，另一部分所有元素都大于基准元素。
    3. 递归地对这两部分分别进行快速排序，直到整个数组有序。
二. 时间复杂度
    1. 最坏情况: O(n^2)
        - 当每次选择的基准元素是当前子数组的最小或最大元素时，分区极不均匀，导致递归深度达到 n 层。
    2. 最好情况: O(n log n)
        - 每次分区都将数组均匀地分为两部分，递归深度为 log n 层。
    3. 平均情况: O(n log n)
        - 基准元素的选择使得分区大致均匀，递归深度为 log n 层。
三. 空间复杂度
    1. 空间复杂度为 O(log n)
        - 主要由递归调用栈所占用的空间决定。在平均情况下，递归深度为 log n。
    2. 最坏情况: O(n)
        - 当分区极不均匀时，递归深度达到 n 层。
四. 优点
    1. 平均情况下，快速排序具有非常高的效率，通常比其他 O(n log n) 的排序算法更快。
    2. 原地排序算法，不需要额外的存储空间（除递归调用栈外）。
    3. 实现简单，且在大多数实际应用中表现优异。
五. 缺点
    1. 最坏情况下的时间复杂度为 O(n^2)，需要通过优化（如随机化基准选择）来避免。
    2. 不是稳定的排序算法，相等元素的相对顺序可能会改变。
    3. 依赖于递归实现，可能会导致栈溢出，尤其是在处理非常大的数组时。
六. 适用场景
    1. 适用于大规模数据集的排序，尤其是当数据分布较为随机时。
    2. 当对排序的稳定性没有严格要求时。
    3. 需要高效的原地排序时。
七. 优化策略
    1. 基准元素选择优化：使用三数取中法或随机选择基准元素，避免最坏情况的发生。
    2. 尾递归优化：优先递归较小的子数组，减少递归深度，降低栈溢出的风险。
    3. 混合排序：对于小规模子数组（如长度 ≤ 10），使用插入排序代替快速排序，提高效率。
*/
#include <stdio.h>

// 快速排序函数声明
void quickSort(int arr[], int left, int right);
// 打印数组函数声明
void printArray(int arr[], int n);

int main()
{
    int arr[] = { 5, 2, 6, 7, 1, 0, 9, 8, 4, 3 };
    int len = sizeof(arr) / sizeof(arr[0]);

    printf("排序前的数组:\n");
    printArray(arr, len);
    
    quickSort(arr, 0, len - 1);
    
    printf("排序后的数组:\n");
    printArray(arr, len);
    return 0;
}

void quickSort(int arr[], int left, int right) {
    if (left >= right)
        return;
    int i = left;
    int j = right;
    int pivot = arr[i]; // 选择基准元素
    while (i < j) {
        while (i < j && arr[j] >= pivot) j--;// 从右向左找到第一个小于基准元素的值
        arr[i] = arr[j]; // 将该值放到左侧
        while (i < j && arr[i] <= pivot) i++;// 从左向右找到第一个大于基准元素的值
        arr[j] = arr[i]; // 将该值放到右侧
    }
    arr[i] = pivot; // 将基准元素放到正确的位置
    
    quickSort(arr, left, i - 1);// 递归排序基准元素左侧的子数组
   
    quickSort(arr, i + 1, right);// 递归排序基准元素右侧的子数组
}
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}
